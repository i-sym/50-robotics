{"version":3,"file":"logsSchema.js","sourceRoot":"/","sources":["shared/schemas/logs/logsSchema.ts"],"names":[],"mappings":";;;AAAA,6BAAuB;AAEV,QAAA,UAAU,GAAG,OAAC,CAAC,MAAM,CAAC;IAC/B,EAAE,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACzB,SAAS,EAAE,OAAC,CAAC,MAAM,CAAC,IAAI,EAAE;IAC1B,SAAS,EAAE,OAAC,CAAC,MAAM,EAAE;IACrB,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE;IACnB,KAAK,EAAE,OAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;CAC9C,CAAC,CAAA;AAEW,QAAA,gBAAgB,GAAG,OAAC,CAAC,MAAM,CAAC;IACrC,UAAU,EAAE,OAAC,CAAC,MAAM,CAAC,IAAI,EAAE;IAC3B,IAAI,EAAE,OAAC,CAAC,KAAK,CAAC,kBAAU,CAAC;CAC5B,CAAC,CAAA","sourcesContent":["import { z } from 'zod'\n\nexport const logsSchema = z.object({\n    id: z.number().optional(),\n    timestamp: z.coerce.date(),\n    subsystem: z.string(),\n    message: z.string(),\n    level: z.enum(['info', 'warning', 'error']),\n})\n\nexport const recentLogsSchema = z.object({\n    lastUpdate: z.coerce.date(),\n    logs: z.array(logsSchema)\n})\n\nexport type LogsData = z.infer<typeof logsSchema>\nexport type RecentLogsData = z.infer<typeof recentLogsSchema>"]}