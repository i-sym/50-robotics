{"version":3,"file":"ModbusService.js","sourceRoot":"/","sources":["modules/modbus/ModbusService.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport ping from 'ping';\nimport env from '../../env';\nimport { z } from \"zod\";\nimport { Modbus } from '../../shared/schemas'\nimport { apiResponseSchema } from '../../lib/response';\n\nexport class ModbusService {\n\n\n    private async requestModbusApi<T>(endpoint: string, method: string, body: any, responseSchema: z.ZodType<T>): Promise<T> {\n        const res = await fetch(`https://modbus.api.solarrouter.rivdevs.com/api/modbus/${endpoint}`, {\n            method: method,\n            headers: {\n                'Content-Type': 'application/json',\n                'api-key': env.ALLOWED_API_KEY\n            },\n            body: JSON.stringify(body)\n        });\n\n        if (!res.ok) {\n            console.log(\"Error2\", res);\n            throw new Error(`HTTP error! status: ${res.status}`);\n        }\n\n        const json = await res.json();\n\n        const parsedResponse = apiResponseSchema.parse(json);\n\n        if (!parsedResponse.success) {\n            throw new Error(`API error: ${parsedResponse.data}`);\n        }\n\n        const parsedData = responseSchema.parse(parsedResponse.data);\n\n        return parsedData;\n    }\n\n\n    public async writeRegister(toRead: Modbus.WriteRegisterRequestData): Promise<Modbus.WriteRegisterResponseData> {\n        try {\n            const res = await this.requestModbusApi('write-register', 'POST', toRead, Modbus.writeRegisterResponseSchema);\n            return res;\n        } catch (error) {\n            throw new Error(`Error writing register: ${error}`);\n        }\n    }\n    public async readRegister(toRead: Modbus.ReadRegisterRequestData): Promise<Modbus.ReadRegisterResponseData | null> {\n        try {\n\n            const res = await this.requestModbusApi('read-register', 'POST', toRead, Modbus.readRegisterResponseSchema);\n            return res;\n\n        } catch (error) {\n            console.log(\"Throwinf Error\", error);\n            return null;\n            // throw new Error(`Error reading register: ${error}`);\n        }\n    }\n    public async ping(config: Modbus.PingRequestData): Promise<Modbus.PingResponseData> {\n        try {\n\n            const res = await this.requestModbusApi('ping', 'POST', config, Modbus.pingResponseSchema);\n            return res;\n\n        } catch (error) {\n            return ({\n                alive: false,\n                time: \"0\"\n            })\n\n        }\n    }\n    public async healthCheck() {\n        try {\n            const res = await this.requestModbusApi('health', 'GET', {}, z.object({\n                service: z.string()\n            }));\n            return res;\n        } catch (error) {\n            throw new Error(`Error health checking: ${error}`);\n        }\n    }\n}\n\n\n"]}