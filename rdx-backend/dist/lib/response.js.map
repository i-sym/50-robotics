{"version":3,"file":"response.js","sourceRoot":"/","sources":["lib/response.ts"],"names":[],"mappings":";;;AAEA,oBAKC;AAED,kBAKC;AAdD,6BAAuB;AAEvB,SAAgB,IAAI,CAAC,IAAS;IAC1B,OAAO,CAAC;QACJ,OAAO,EAAE,IAAI;QACb,IAAI,EAAE,IAAI;KACb,CAAC,CAAA;AACN,CAAC;AAED,SAAgB,GAAG,CAAC,IAAS;IACzB,OAAO,CAAC;QACJ,OAAO,EAAE,KAAK;QACd,IAAI,EAAE,IAAI;KACb,CAAC,CAAA;AACN,CAAC;AAEY,QAAA,iBAAiB,GAAG,OAAC,CAAC,kBAAkB,CAAC,SAAS,EAAE;IAC7D,OAAC,CAAC,MAAM,CAAC;QACL,OAAO,EAAE,OAAC,CAAC,OAAO,CAAC,IAAI,CAAC;QACxB,IAAI,EAAE,OAAC,CAAC,GAAG,EAAE;KAChB,CAAC;IACF,OAAC,CAAC,MAAM,CAAC;QACL,OAAO,EAAE,OAAC,CAAC,OAAO,CAAC,KAAK,CAAC;QACzB,IAAI,EAAE,OAAC,CAAC,GAAG,EAAE;KAChB,CAAC;CACL,CAAC,CAAA","sourcesContent":["import { z } from \"zod\"\n\nexport function good(data: any): z.infer<typeof apiResponseSchema> {\n    return ({\n        success: true,\n        data: data\n    })\n}\n\nexport function bad(data: any): z.infer<typeof apiResponseSchema> {\n    return ({\n        success: false,\n        data: data\n    })\n}\n\nexport const apiResponseSchema = z.discriminatedUnion('success', [\n    z.object({\n        success: z.literal(true),\n        data: z.any(),\n    }),\n    z.object({\n        success: z.literal(false),\n        data: z.any(),\n    }),\n])"]}